// LIQUID FLOW RATE MEASUREMENT SYSTEM/METER SYSTEM

/*
Liquid flow rate sensor
Measuring the liquid/water flow rate.
Connecting Vcc and Gnd of sensor to arduino, and the
signal line to arduino digital pin 2.
M
 */
#include "U8glib.h"
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0|U8G_I2C_OPT_NO_ACK|U8G_I2C_OPT_FAST);
#include <LiquidCrystal.h>  // lcd lines
const int rs = 12, en = 11, d4 = 6, d5 = 5, d6 = 4, d7 = 3; // lcd lines
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);  // lcd lines
byte sensorInterrupt = 0;  // 0 = digital pin 2
byte sensorPin       = 2;
int  solenoidValve   = 8;
char x ;

// The hall-effect flow sensor outputs approximately 4.5 pulses per second per
// litre/minute of flow.

float calibrationFactor = 4.5;
volatile byte pulseCount;
float flowRate;
float billAmount;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres, tempTotal=-1;
unsigned long oldTime;

void setup()
{
  Serial.begin(9600); // lcd lines
  lcd.begin(16, 2); // lcd lines
  pinMode(solenoidValve, OUTPUT);
  // Initialize a serial connection for reporting values to the host
  Serial.begin(9600);
  // assign default color value
  if ( u8g.getMode() == U8G_MODE_R3G3B2 ) {
    u8g.setColorIndex(255);     // white
  }
  else if ( u8g.getMode() == U8G_MODE_GRAY2BIT ) {
    u8g.setColorIndex(3);         // max intensity
  }
  else if ( u8g.getMode() == U8G_MODE_BW ) {
    u8g.setColorIndex(1);         // pixel on
  }
  else if ( u8g.getMode() == U8G_MODE_HICOLOR ) {
    u8g.setHiColorByRGB(255,255,255);
  }
  displayVolumeOfWater(0);
  pinMode(sensorPin, INPUT);
  digitalWrite(sensorPin, HIGH);
  pulseCount        = 0;
  flowRate          = 0.0;
  flowMilliLitres   = 0;
  totalMilliLitres  = 0;
  oldTime           = 0;
  // The Hall-effect sensor is connected to pin 2 which uses interrupt 0.
  // Configured to trigger on a FALLING state change (transition from HIGH
  // state to LOW state)
  attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
  delay(100);
}

void loop()
{ 
   if((millis() - oldTime) > 1000)    // Only process counters once per second
   {
    // Disable the interrupt while calculating flow rate and sending the value to
    // the host
    detachInterrupt(sensorInterrupt);
    // Because this loop may not complete in exactly 1 second intervals we calculate
    // the number of milliseconds that have passed since the last execution and use
    // that to scale the output. We also apply the calibrationFactor to scale the output
    // based on the number of pulses per second per units of measure (litres/minute in
    // this case) coming from the sensor.
    flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;
 
    // Note the time this processing pass was executed. Note that because we've
    // disabled interrupts the millis() function won't actually be incrementing right
    // at this point, but it will still return the value it was set to just before
    // interrupts went away.
    oldTime = millis();
 
    // Divide the flow rate in litres/minute by 60 to determine how many litres have
    // passed through the sensor in this 1 second interval, then multiply by 1000 to
    // convert to millilitres.
    flowMilliLitres = (flowRate / 60) * 1000;
    // Add the millilitres passed in this second to the cumulative total
    totalMilliLitres += flowMilliLitres;

    if ( totalMilliLitres <= 1000 )
      billAmount = 0.05*totalMilliLitres;
    else if ( totalMilliLitres > 1000 )
      {
        float penaltyMilliLitres = totalMilliLitres - 1000;
        float penaltyAmount = 0.1*penaltyMilliLitres;
        billAmount = penaltyAmount + 50;
      }

    if ((oldTime > 8000) && (flowMilliLitres > 70))
    {
      digitalWrite( solenoidValve, LOW );
      Serial.print("\nWATER WAS GETTING WASTED, ARE YOU AWARE ? ");
      Serial.print("\nTYPE 'Y' OR 'N' " );  // YES OR NO
      Serial.print("\nWATER SUPPLY : OFF");   
      Serial.println();                       
      while( Serial.available()==0 )
       {
        delay(10);
 HERE: {                                        
        lcd.clear();                            
        lcd.setCursor(0,0);                     
        lcd.print("WATER SUPPLY:OFF");          
       }                                    
        x = Serial.read();      
        if( x == 'N' )
        { 
          Serial.print("\nYOUR REPLY IS : NO");
          digitalWrite( solenoidValve, LOW );
          Serial.print("\nOK, PLEASE SOVE THE PROBLEM SOON");
          Serial.print("\nTYPE 'Y' WHEN YOU HAVE SOLVED THE PROBLEM ");
          Serial.print("\nWATER SUPPLY IS OFF");
          Serial.println();
          goto HERE;
        }
        else if( x == 'Y' )
        {
          Serial.print("\nYOUR REPLY IS : YES");
          delay(1000);            // assume 10 seconds
          digitalWrite( solenoidValve, HIGH );
          Serial.print("\nALRIGHT, THINGS ARE FINE ");
          Serial.print("\nWATER SUPPLY IS ON");
          Serial.println();
          goto JUMP;
        }
       }
   }
         else
          digitalWrite( solenoidValve, HIGH );
          
 JUMP: unsigned int frac1;
    // Print the flow rate for this second in litres / minute
    Serial.println();
    delay(10);
    Serial.print("Flow rate: ");
    Serial.print(int(flowRate));   // Print the integer part of the variable
    Serial.print(".");             // Print the decimal point
    // Determine the fractional part. The 10 multiplier gives us 1 decimal place.
    frac1 = (flowRate - int(flowRate)) * 10;
    Serial.print(frac1, DEC) ;      // Print the fractional part of the variable
    Serial.print("L/min");
    
    // Print the number of litres flowed in this second
    Serial.print("\nCurrent Liquid Flowing: ");            // Output separator
    Serial.print(flowMilliLitres);
    Serial.print("mL/Sec");
    // Print the cumulative total of litres flowed since starting
    Serial.print("\nOutput Liquid Quantity: ");            // Output separator
    Serial.print(totalMilliLitres);
    Serial.println("mL");
    unsigned int frac2;
    Serial.print("Bill Amount : ");                        // Output separator
    Serial.print(" Rupees ");
    Serial.print(int(billAmount));
    Serial.print("."); 
    frac2 = (billAmount - int(billAmount)) * 10;
    Serial.print(frac2, DEC) ;

    int solenoidValveStatus = digitalRead(solenoidValve);
    if ( solenoidValveStatus == HIGH )
    {
      Serial.print("\nWATER SUPPLY : ON");
      Serial.println();
    }

    if( tempTotal != totalMilliLitres )
    {
        tempTotal = totalMilliLitres;
        displayVolumeOfWater( totalMilliLitres );
    }
    
    // Reset the pulse counter so we can start incrementing again
    pulseCount = 0;
    // Enable the interrupt again now that we've finished sending output
    attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
    int incomingByte = Serial.read(); // lcd lines
    int chk = sensorPin;

    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("   Flow Rate :   ");
    lcd.setCursor(3,1);
    lcd.print( int(flowRate ));
    lcd.print(".");
    lcd.print(frac1, DEC) ;     
    lcd.print(" L/min");
    delay(1500);

    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(" Current Flow : ");      // Current Liquid Flowing:
    lcd.setCursor(1,1);
    lcd.print(int(flowMilliLitres));
    lcd.print(" mL/Sec ");
    delay(1500);

    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(" Output Quantity : ");    // Output Liquid Quantity:  
    lcd.setCursor(1,1);
    lcd.print(int(totalMilliLitres));
    lcd.print(" mL");
    delay(1500);

    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(" Bill Amount : ");    // Output Liquid Quantity:  
    lcd.setCursor(1,1);
    lcd.print("Rupees ");
    lcd.print(int(billAmount));
    lcd.print(".");
    lcd.print(frac2, DEC) ; 
    delay(1500);

    solenoidValveStatus = digitalRead(solenoidValve);
    if ( solenoidValveStatus == HIGH )
    {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("WATER SUPPLY: ON");
    }
    delay(1500);  
  }
}

/*
Insterrupt Service Routine
 */
void pulseCounter()
{
  // Increment the pulse counter
  pulseCount++;
}

void displayVolumeOfWater( int val){

  char buf[5];
  sprintf(buf, "%d", val);
  // picture loop
  u8g.firstPage();
  do {
     u8g.setFont(u8g_font_fub25);
     //u8g.setFont(u8g_font_osb21);
     u8g.drawStr( 0, 32, buf);

     u8g.setFont(u8g_font_fur14);
     u8g.drawStr( 0, 52, "volume ml");
  } 
  while( u8g.nextPage() );
}